{"version":3,"sources":["hooks/api/index.js","components/WeatherCard/index.js","components/Carousel/index.js","components/WeatherBarChart/index.js","hooks/api/useWeatherDataQuery.js","utils/convertKelvinToFahrenheit.js","pages/Main/transformers.js","pages/Main/index.js","utils/convertKelvinToCelsius.js","App.js","reportWebVitals.js","index.js"],"names":["queryClient","QueryClient","useStyles","makeStyles","root","width","minWidth","border","boxShadow","selected","cursor","WeatherCard","date","onClick","temp","scale","classes","onClickHandler","React","useCallback","Card","data-testid","variant","className","CardContent","toUpperCase","buttonsContainer","display","flex","justifyContent","margin","contentContainer","overflowX","padding","marginLeft","Carousel","props","useState","page","setPage","startIndex","useMemo","perPage","endIndex","totalPages","data","length","Button","fontSize","slice","map","Children","children","Child","cloneElement","key","keyExtractor","getTimeIn12HourFormat","format","Date","WeatherBarChart","color","palette","useTheme","unitSuffix","ResponsiveContainer","height","BarChart","right","left","maxBarSize","Tooltip","formatter","labelFormatter","YAxis","dataKey","unit","XAxis","tickFormatter","interval","Bar","fill","main","ReferenceLine","y","REACT_APP_OPEN_WEATHER_KEY","process","defaultResponse","list","convertKelvinToFahrenheit","Number","toFixed","getAverageTemperatureForDay","forecasts","reduce","forecast","defaultQuery","location","count","Main","setScale","selectedDate","selectDate","keys","variables","options","refetchOnWindowFocus","useQuery","fetch","then","res","json","response","useWeatherDataQuery","isLoading","dayForecasts","forecastDate","dt_txt","split","push","getDateToForecastMap","f","convertKelvinToTemperature","forecastMap","Object","Backdrop","open","CircularProgress","RadioGroup","row","aria-label","name","defaultValue","onChange","e","target","value","FormControlLabel","control","Radio","label","App","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAEaA,EAAc,I,OAAIC,G,+FCGzBC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,4BACPC,SAAU,QACVC,OAAQ,OACRC,UAAW,qBAAGC,SACD,kBAAoB,oBACjCC,OAAQ,aAIG,SAASC,EAAT,GAOX,IANFF,EAMC,EANDA,SACAG,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,KACAC,EAEC,EAFDA,MAGMC,GADL,4DACed,EAAU,CAAEO,cAEtBQ,EAAiBC,IAAMC,aAAY,WACvCN,EAAQD,KACP,CAACA,EAAMC,IAEV,OACE,cAACO,EAAA,EAAD,CACEC,cAAaT,EACbU,QAAQ,WACRC,UAAWP,EAAQZ,KACnBS,QAASI,EAJX,SAME,eAACO,EAAA,EAAD,WACE,uCACQ,uBAAO,IACb,8BACGV,EADH,cAEOC,EAAMU,qBAGf,uCACQ,uBADR,IACe,4BAAIb,Y,yDCxCrBV,EAAYC,aAAW,WAC3B,MAAO,CACLuB,iBAAkB,CAChBC,QAAS,OACTC,KAAM,EACNC,eAAgB,gBAChBC,OAAQ,YAEVC,iBAAkB,CAChBC,UAAW,OACXL,QAAS,OACTM,QAAS,WACT,0BAA2B,CACzBC,WAAY,aAML,SAASC,EAASC,GAC/B,IAAMpB,EAAUd,IADsB,EAEdgB,IAAMmB,SAAS,GAFD,mBAE/BC,EAF+B,KAEzBC,EAFyB,KAIhCC,EAAatB,IAAMuB,SAAQ,kBAAMH,EAAOF,EAAMM,UAAS,CAC3DJ,EACAF,EAAMM,UAGFC,EAAWzB,IAAMuB,SAAQ,kBAAMD,EAAaJ,EAAMM,UAAS,CAC/DF,EACAJ,EAAMM,UAGFE,EAAa1B,IAAMuB,SACvB,kBAAML,EAAMS,KAAKC,OAASV,EAAMM,QAAU,IAC1C,CAACN,EAAMS,KAAKC,OAAQV,EAAMM,UAE5B,OACE,qCACE,sBAAKnB,UAAWP,EAAQU,iBAAxB,UACGY,EAAO,EACN,cAACS,EAAA,EAAD,CAAQ1B,cAAY,OAAOR,QAAS,kBAAM0B,GAAQ,SAACD,GAAD,QAAYA,MAAOhB,QAAQ,WAA7E,SACE,cAAC,IAAD,CAAiB0B,SAAS,YAG5B,yBAEDV,EAAOM,EACN,cAACG,EAAA,EAAD,CAAQ1B,cAAY,QAAQR,QAAS,kBAAM0B,GAAQ,SAACD,GAAD,QAAYA,MAAOhB,QAAQ,WAA9E,SACE,cAAC,IAAD,CAAkB0B,SAAS,YAG7B,4BAGJ,qBAAKzB,UAAWP,EAAQe,iBAAxB,SACGK,EAAMS,KAAKI,MAAMT,EAAYG,GAAUO,KAAI,SAACL,GAAD,OAC1C3B,IAAMiC,SAASD,IAAId,EAAMgB,UAAU,SAACC,GAAD,OACjCnC,IAAMoC,aAAaD,EAAnB,2BACKR,GADL,IAEEU,IAAKnB,EAAMoB,cAAgBpB,EAAMoB,aAAaX,iB,6FCrDtD3C,EAAYC,aAAW,iBAAO,CAClCC,KAAM,CACJ0B,OAAQ,gBAIN2B,EAAwB,SAACZ,GAAD,OAAUa,IAAO,IAAIC,KAAKd,GAAO,YAEhD,SAASe,EAAT,GAKX,IAAD,IAJDC,aAIC,MAJO,UAIP,EAHDhB,EAGC,EAHDA,KAGC,IAFD9B,aAEC,MAFO,GAEP,EACKC,GADL,wCACed,KACR4D,EAAYC,cAAZD,QACFE,EAAa9C,IAAMuB,SAAQ,iBAAM,OAAM1B,EAAMU,gBAAe,CAACV,IAEnE,OACE,cAACkD,EAAA,EAAD,CAAqB5D,MAAM,MAAM6D,OAAQ,IAAzC,SACE,eAACC,EAAA,EAAD,CACE5C,UAAWP,EAAQZ,KACnByC,KAAMA,EACNf,OAAQ,CAAEsC,MAAO,GAAIC,MAAO,IAC5BC,WAAY,GAJd,UAME,cAACC,EAAA,EAAD,CACEC,UAAW,SAAC1D,GAAD,OAAUA,EAAOkD,GAC5BS,eAAgBhB,IAElB,cAACiB,EAAA,EAAD,CAAOC,QAAQ,OAAOC,KAAMZ,IAC5B,cAACa,EAAA,EAAD,CACEF,QAAQ,SACRG,cAAerB,EACfsB,SAAU,IAEZ,cAACC,EAAA,EAAD,CAAKL,QAAQ,OAAOM,KAAMnB,EAAQD,GAAOqB,OACzC,cAACC,EAAA,EAAD,CAAeC,EAAG,S,sBChDlBC,EAA+BC,mCACjCC,EAAkB,CAAEC,KAAM,ICHjB,SAASC,EAA0B3E,GAChD,OAAO4E,QAAQ,KAAC5E,EAAO,QAAoB,IAAI6E,QAAQ,ICYlD,SAASC,EAA4BC,GAC1C,OACEA,EAAUC,QAAO,SAAChF,EAAMiF,GAAP,OAAoBjF,EAAOiF,EAASjF,OAAM,GAC3D+E,EAAU/C,QACV6C,QAAQ,G,WCINK,EAAe,CACnBC,SAAU,YACVC,MAAO,IAsEMC,MAnEf,WAAiB,IAAD,EACYjF,IAAMmB,SAAS,KAD3B,mBACPtB,EADO,KACAqF,EADA,OAEqBlF,IAAMmB,WAF3B,mBAEPgE,EAFO,KAEOC,EAFP,OHrBD,SACbC,GAGC,IAFDC,EAEA,uDAFY,GACZC,EACA,uDADU,CAAEC,sBAAsB,GAClC,EACgDC,YAAS,CACtD,eADqD,mBACnCJ,KACnB,kBACEK,MAAM,sDAAD,OACmDJ,EAAUP,SAD7D,kBAC+EZ,EAD/E,gBACiHmB,EAAUN,QAC9HW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,YACpBN,GAPF,IACQ5D,YADR,MACe0C,EADf,EACmCyB,EADnC,wBASA,OAAO,2BAAKA,GAAZ,IAAsBnE,SGYMoE,CAC1B,CAACjB,EAAaC,SAAUD,EAAaE,OACrCF,GAFMnD,EAJM,EAINA,KAAMqE,EAJA,EAIAA,UAKRC,EAAejG,IAAMuB,SAAQ,WAEjC,ODlCG,SAA8BoD,GACnC,OAAOA,EAAUC,QAAO,SAAC5C,EAAK6C,GAC5B,IAAMqB,EAAerB,EAASsB,OAAOC,MAAM,KAAK,GAIhD,OAHIpE,EAAIkE,GACNlE,EAAIkE,GAAcG,KAAlB,2BAA4BxB,EAASb,MAArC,IAA2CmC,OAAQtB,EAASsB,UACzDnE,EAAIkE,GAAgB,CAAC,2BAAKrB,EAASb,MAAf,IAAqBmC,OAAQtB,EAASsB,UACxDnE,IACN,IC2BMsE,CDNJ,SAAoC3B,EAAW9E,GACpD,OAAO8E,EAAU3C,KAAI,SAACuE,GACpB,OAAO,2BACFA,GADL,IAEEvC,KAAK,2BACAuC,EAAEvC,MADH,IAEFpE,KACY,MAAVC,GEtCqCD,EFuCV2G,EAAEvC,KAAKpE,KEtCnC4E,QAAQ5E,EAAO,QAAQ6E,QAAQ,KFuC1BF,EAA0BgC,EAAEvC,KAAKpE,UExChC,IAAgCA,KDoChB4G,CAA2B7E,EAAK2C,KAAMzE,MAEhE,CAAC8B,EAAK2C,KAAMzE,IAET8E,EAAY3E,IAAMuB,SACtB,kBDrBmCkF,ECsBVR,EDrBpBS,OAAOrB,KAAKoB,GAAazE,KAAI,SAACtC,GACnC,IAAMiF,EAAY8B,EAAY/G,GAC9B,MAAO,CACLE,KAAM8E,EAA4BC,GAClCjF,OACAiF,iBCgBqC3C,KAAI,SAAC6C,GAExC,OADAA,EAAStF,SAAWsF,EAASnF,OAASyF,EAC/BN,KDxBR,IAAgC4B,IC0BnC,CAACR,EAAcd,IAGjB,OAAIa,EAEA,cAACW,EAAA,EAAD,CAAUC,MAAI,EAACzG,cAAY,UAA3B,SACE,cAAC0G,EAAA,EAAD,MAMJ,sBAAKxG,UAAU,OAAf,UACE,qBAAKA,UAAU,oBAAf,SACE,eAACyG,EAAA,EAAD,CACEC,KAAG,EACHC,aAAW,WACXC,KAAK,WACLC,aAAa,IACbC,SAAU,SAACC,GAAD,OAAOlC,EAASkC,EAAEC,OAAOC,QALrC,UAOE,cAACC,EAAA,EAAD,CACED,MAAM,IACNE,QAAS,cAACC,EAAA,EAAD,CAAO9E,MAAM,YACtB+E,MAAM,YAER,cAACH,EAAA,EAAD,CACED,MAAM,IACNE,QAAS,cAACC,EAAA,EAAD,CAAO9E,MAAM,YACtB+E,MAAM,oBAIZ,cAACzG,EAAD,CACEO,QAAS,EACTG,KAAMgD,EACNrC,aAAc,SAACX,GAAD,OAAUA,EAAKjC,MAH/B,SAKE,cAACD,EAAD,CAAaI,MAAOA,EAAOF,QAASyF,MAErCD,KAAgBc,EACf,cAACvD,EAAD,CAAiB7C,MAAOA,EAAO8B,KAAMsE,EAAad,KAChD,S,OEvEKwC,MAVf,WACE,OACE,qBAAKtH,UAAU,MAAf,SACE,cAACuH,EAAA,EAAD,CAAqBC,OAAQ/I,EAA7B,SACE,cAAC,EAAD,SCCOgJ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.566d2e9f.chunk.js","sourcesContent":["import { QueryClient } from 'react-query'\n \nexport const queryClient = new QueryClient()\n\n\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"clamp(125px, 30vw, 220px)\",\n    minWidth: \"125px\",\n    border: \"none\",\n    boxShadow: ({ selected }) =>\n      selected ? \"0 0 0 2px black\" : \"0 0 0 1px silver\",\n    cursor: \"pointer\",\n  },\n});\n\nexport default function WeatherCard({\n  selected,\n  date,\n  onClick,\n  temp,\n  scale,\n  ...props\n}) {\n  const classes = useStyles({ selected });\n\n  const onClickHandler = React.useCallback(() => {\n    onClick(date);\n  }, [date, onClick]);\n\n  return (\n    <Card\n      data-testid={date}\n      variant=\"outlined\"\n      className={classes.root}\n      onClick={onClickHandler}\n    >\n      <CardContent>\n        <p>\n          Temp: <br />{\" \"}\n          <b>\n            {temp}\n            {`Â°${scale.toUpperCase()}`}\n          </b>\n        </p>\n        <p>\n          Date: <br /> <b>{date}</b>\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\n\nconst useStyles = makeStyles(() => {\n  return {\n    buttonsContainer: {\n      display: \"flex\",\n      flex: 1,\n      justifyContent: \"space-between\",\n      margin: \"30px 0px\",\n    },\n    contentContainer: {\n      overflowX: \"auto\",\n      display: \"flex\",\n      padding: \"20px 3px\",\n      \"& > *:not(:first-child)\": {\n        marginLeft: \"20px\",\n      },\n    },\n  };\n});\n\nexport default function Carousel(props) {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n\n  const startIndex = React.useMemo(() => page * props.perPage, [\n    page,\n    props.perPage,\n  ]);\n\n  const endIndex = React.useMemo(() => startIndex + props.perPage, [\n    startIndex,\n    props.perPage,\n  ]);\n\n  const totalPages = React.useMemo(\n    () => props.data.length / props.perPage - 1,\n    [props.data.length, props.perPage]\n  );\n  return (\n    <>\n      <div className={classes.buttonsContainer}>\n        {page > 0 ? (\n          <Button data-testid=\"left\" onClick={() => setPage((page) => --page)} variant=\"outlined\">\n            <ChevronLeftIcon fontSize=\"large\" />\n          </Button>\n        ) : (\n          <span />\n        )}\n        {page < totalPages ? (\n          <Button data-testid=\"right\" onClick={() => setPage((page) => ++page)} variant=\"outlined\">\n            <ChevronRightIcon fontSize=\"large\" />\n          </Button>\n        ) : (\n          <span />\n        )}\n      </div>\n      <div className={classes.contentContainer}>\n        {props.data.slice(startIndex, endIndex).map((data) =>\n          React.Children.map(props.children, (Child) =>\n            React.cloneElement(Child, {\n              ...data,\n              key: props.keyExtractor && props.keyExtractor(data),\n            })\n          )\n        )}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\nimport format from \"date-fns/format\";\nimport { makeStyles, useTheme } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    margin: \"40px 0px\",\n  },\n}));\n\nconst getTimeIn12HourFormat = (data) => format(new Date(data), \"h:mm aa\");\n\nexport default function WeatherBarChart({\n  color = \"primary\",\n  data,\n  scale = \"\",\n  ...props\n}) {\n  const classes = useStyles();\n  const { palette } = useTheme();\n  const unitSuffix = React.useMemo(() => \"Â°\" + scale.toUpperCase(), [scale]);\n\n  return (\n    <ResponsiveContainer width=\"90%\" height={250}>\n      <BarChart\n        className={classes.root}\n        data={data}\n        margin={{ right: 20, left: -10 }}\n        maxBarSize={20}\n      >\n        <Tooltip\n          formatter={(temp) => temp + unitSuffix}\n          labelFormatter={getTimeIn12HourFormat}\n        />\n        <YAxis dataKey=\"temp\" unit={unitSuffix} />\n        <XAxis\n          dataKey=\"dt_txt\"\n          tickFormatter={getTimeIn12HourFormat}\n          interval={0}\n        />\n        <Bar dataKey=\"temp\" fill={palette[color].main} />\n        <ReferenceLine y={0} />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\n","import { useQuery } from \"react-query\";\n\nconst { REACT_APP_OPEN_WEATHER_KEY } = process.env;\nconst defaultResponse = { list: [] };\n\nexport default function useWeatherDataQuery(\n  keys,\n  variables = {},\n  options = { refetchOnWindowFocus: false }\n) {\n  const { data = defaultResponse, ...response } = useQuery(\n    [\"weatherData\", ...keys],\n    () =>\n      fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${variables.location}&APPID=${REACT_APP_OPEN_WEATHER_KEY}&cnt=${variables.count}`\n      ).then(res => res.json()),\n    options\n  );\n  return { ...response, data };\n}\n","export default function convertKelvinToFahrenheit(temp){\n  return Number(((temp - 273.15) * (9 / 5) + 32).toFixed(2));\n}","import convertKelvinToFahrenheit from \"utils/convertKelvinToFahrenheit\";\nimport convertKelvinToCelsius from \"utils/convertKelvinToCelsius\";\n\nexport function getDateToForecastMap(forecasts) {\n  return forecasts.reduce((map, forecast) => {\n    const forecastDate = forecast.dt_txt.split(\" \")[0];\n    if (map[forecastDate])\n      map[forecastDate].push({ ...forecast.main, dt_txt: forecast.dt_txt });\n    else map[forecastDate] = [{ ...forecast.main, dt_txt: forecast.dt_txt }];\n    return map;\n  }, {});\n}\n\nexport function getAverageTemperatureForDay(forecasts) {\n  return (\n    forecasts.reduce((temp, forecast) => temp + forecast.temp, 0) /\n    forecasts.length\n  ).toFixed(2);\n}\n\nexport function getConsumableForecasts(forecastMap) {\n  return Object.keys(forecastMap).map((date) => {\n    const forecasts = forecastMap[date];\n    return {\n      temp: getAverageTemperatureForDay(forecasts),\n      date,\n      forecasts,\n    };\n  });\n}\n\nexport function convertKelvinToTemperature(forecasts, scale) {\n  return forecasts.map((f) => {\n    return {\n      ...f,\n      main: {\n        ...f.main,\n        temp:\n          scale === \"c\"\n            ? convertKelvinToCelsius(f.main.temp)\n            : convertKelvinToFahrenheit(f.main.temp),\n      },\n    };\n  });\n}\n","import React from \"react\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\n\nimport WeatherCard from \"components/WeatherCard\";\nimport Carousel from \"components/Carousel/index.js\";\nimport WeatherBarChart from \"components/WeatherBarChart/index.js\";\n\nimport useWeatherDataQuery from \"hooks/api/useWeatherDataQuery\";\n\nimport {\n  getDateToForecastMap,\n  getConsumableForecasts,\n  convertKelvinToTemperature,\n} from \"./transformers\";\n\nimport \"./Main.css\";\n\nconst defaultQuery = {\n  location: \"Munich,de\",\n  count: 40,\n};\n\nfunction Main() {\n  const [scale, setScale] = React.useState(\"c\");\n  const [selectedDate, selectDate] = React.useState();\n\n  const { data, isLoading } = useWeatherDataQuery(\n    [defaultQuery.location, defaultQuery.count],\n    defaultQuery\n  );\n\n  const dayForecasts = React.useMemo(() => {\n    const convertedForecasts = convertKelvinToTemperature(data.list, scale);\n    return getDateToForecastMap(convertedForecasts);\n  }, [data.list, scale]);\n\n  const forecasts = React.useMemo(\n    () =>\n      getConsumableForecasts(dayForecasts).map((forecast) => {\n        forecast.selected = forecast.date === selectedDate;\n        return forecast;\n      }),\n    [dayForecasts, selectedDate]\n  );\n\n  if (isLoading) {\n    return (\n      <Backdrop open data-testid=\"loading\">\n        <CircularProgress />\n      </Backdrop>\n    );\n  }\n\n  return (\n    <div className=\"Main\">\n      <div className=\"buttons-container\">\n        <RadioGroup\n          row\n          aria-label=\"position\"\n          name=\"position\"\n          defaultValue=\"c\"\n          onChange={(e) => setScale(e.target.value)}\n        >\n          <FormControlLabel\n            value=\"c\"\n            control={<Radio color=\"primary\" />}\n            label=\"Celsius\"\n          />\n          <FormControlLabel\n            value=\"f\"\n            control={<Radio color=\"primary\" />}\n            label=\"Fahrenheit\"\n          />\n        </RadioGroup>\n      </div>\n      <Carousel\n        perPage={3}\n        data={forecasts}\n        keyExtractor={(data) => data.date}\n      >\n        <WeatherCard scale={scale} onClick={selectDate} />\n      </Carousel>\n      {selectedDate in dayForecasts ? (\n        <WeatherBarChart scale={scale} data={dayForecasts[selectedDate]} />\n      ) : null}\n    </div>\n  );\n}\n\nexport default Main;\n","export default function convertKelvinToCelsius(temp) {\n  return Number((temp - 273.15).toFixed(2));\n}\n","import { QueryClientProvider } from \"react-query\";\nimport { queryClient } from \"hooks/api\";\n\nimport Main from \"pages/Main\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QueryClientProvider client={queryClient}>\n        <Main />\n      </QueryClientProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}